{
    "docs": [
        {
            "location": "/", 
            "text": "Impulse-ML: Recommender, the Recommender Engine\n\n\nAbout\n\n\nImpulse-ML: Recommender is PHP library which can be used to share\npersonalized content for users on your website. It is written in PHP\nand requires no additional dependencies. With OOP API you can achieve good\nprediction results and you can quickly apply recommender system in any PHP\napplication, e.g. in Wordpress, Drupal or any other PHP framework based application.\n\n\nMachine Learning\n\n\nRecommender system solves a machine learning problem. Given items (i.e. movies rated by user) \nare possible to rate by users (i.e. 0 - 5 star rating). With given\nrating data Recommender System can predict:\n\n\n\n\nmovie ratings, of those movies which are unrated by the user\n\n\nfind similar movies \n\n\nget the prediction for user who don't rate any movie. \n\n\n\n\nImpulse-ML: Recommender uses \nCollaborative\n \nFiltering\n algorithm\nso it is not required to provide item features, which can be \nunderstand as real item categories (i.e. comedy or action movie and their values) and it is\nnot required to provide category features which can be understand as user preferences.\nThe system learns \nby itself with only given items, categories and defined ratings.\n\n\nAs long as you set Learning Model parameters and Training parameters \nmore accurate you might end up with pretty good prediction of rating the movie \nwhich is not rated by user yet - assuming that the more ratings you give the more accurate \npredictions you will get.\n\n\nImpulse-ML: Recommender uses the gradient descent learning algorithm.\n\n\nFor general details about Recommender Systems you might consider visit\n\nWikipedia - Recommender System\n to get \nintuition what is going on under the hood.\n\n\nRequirements\n\n\n\n\nPHP \n= 5.4\n\n\n\n\nTable of contents\n\n\n\n\n1. Problem motivation\n\n\nDo I need Impulse-ML: Recommender, the Recommender System?\n\n\nProblem definition\n\n\nTraining and training parameters\n\n\n\n\n\n\n2. API - Dataset\n\n\nPassing data to Impulse-ML: Recommender Dataset\n\n\n\n\n\n\n3. API - Learning Model\n\n\nLearning from dataset\n \n\n\n\n\n\n\n4. API - Training the Learning Model\n\n\nTraining the model\n\n\n\n\n\n\n5. API - Predicting the results\n\n\nPredict rating for user\n\n\nFind similar items\n\n\nPredict rate for user which has not rated any movie\n\n\n\n\n\n\n6. API - Full Example\n\n\n7. Examples of training\n\n\n8. API - Saving and restoring trained model\n\n\nSave\n\n\nRestore", 
            "title": "Impulse-ML: Recommender"
        }, 
        {
            "location": "/#impulse-ml-recommender-the-recommender-engine", 
            "text": "", 
            "title": "Impulse-ML: Recommender, the Recommender Engine"
        }, 
        {
            "location": "/#about", 
            "text": "Impulse-ML: Recommender is PHP library which can be used to share\npersonalized content for users on your website. It is written in PHP\nand requires no additional dependencies. With OOP API you can achieve good\nprediction results and you can quickly apply recommender system in any PHP\napplication, e.g. in Wordpress, Drupal or any other PHP framework based application.", 
            "title": "About"
        }, 
        {
            "location": "/#machine-learning", 
            "text": "Recommender system solves a machine learning problem. Given items (i.e. movies rated by user) \nare possible to rate by users (i.e. 0 - 5 star rating). With given\nrating data Recommender System can predict:   movie ratings, of those movies which are unrated by the user  find similar movies   get the prediction for user who don't rate any movie.    Impulse-ML: Recommender uses  Collaborative   Filtering  algorithm\nso it is not required to provide item features, which can be \nunderstand as real item categories (i.e. comedy or action movie and their values) and it is\nnot required to provide category features which can be understand as user preferences.\nThe system learns \nby itself with only given items, categories and defined ratings.  As long as you set Learning Model parameters and Training parameters \nmore accurate you might end up with pretty good prediction of rating the movie \nwhich is not rated by user yet - assuming that the more ratings you give the more accurate \npredictions you will get.  Impulse-ML: Recommender uses the gradient descent learning algorithm.  For general details about Recommender Systems you might consider visit Wikipedia - Recommender System  to get \nintuition what is going on under the hood.", 
            "title": "Machine Learning"
        }, 
        {
            "location": "/#requirements", 
            "text": "PHP  = 5.4", 
            "title": "Requirements"
        }, 
        {
            "location": "/#table-of-contents", 
            "text": "1. Problem motivation  Do I need Impulse-ML: Recommender, the Recommender System?  Problem definition  Training and training parameters    2. API - Dataset  Passing data to Impulse-ML: Recommender Dataset    3. API - Learning Model  Learning from dataset      4. API - Training the Learning Model  Training the model    5. API - Predicting the results  Predict rating for user  Find similar items  Predict rate for user which has not rated any movie    6. API - Full Example  7. Examples of training  8. API - Saving and restoring trained model  Save  Restore", 
            "title": "Table of contents"
        }, 
        {
            "location": "/1_problem_motivation/", 
            "text": "1. Problem motivation\n\n\nDo I need Impulse-ML: Recommender, the Recommender System?\n\n\nIf you are a PHP developer who maintains any PHP social application and you\nwant to predict the \"rating\" or \"preference\" that a user would give to an item\nthe Impulse-ML: Recommender is library that you might consider to use!\nIn further readings I will show you how to use Impulse-ML: Recommender\nand give you a hint on how to choose parameters which makes the predictions\nmore accurate.\n\n\nProblem definition\n\n\nConsider the following data:\n\n\n+---------------------------------+------+---------+---------+---------+\n| Movie \\ User                    | Anna | Barbara | Charlie | Dave    |\n+---------------------------------+------+---------+---------+---------+\n| The Dark Knight                 | 0    | 0       | 5       | 5       |\n+---------------------------------+------+---------+---------+---------+\n| Guardians of the Galaxy         | 0    | ?       | ?       | 5       |\n+---------------------------------+------+---------+---------+---------+\n| Logan                           | ?    | 0       | 4       | ?       |\n+---------------------------------+------+---------+---------+---------+\n| Forrest Gump                    | 4    | 5       | 0       | 0       |\n+---------------------------------+------+---------+---------+---------+\n| The Kid                         | 5    | 5       | 0       | 0       |\n+---------------------------------+------+---------+---------+---------+\n\n\n\n\nIn this particular example we can notice:\n\n\n\n\nwe have 5 items - 5 movies\n\n\nwe have 4 categories - 4 users\n\n\nwe can notice 2 types of items: action movie and comedy movie\n\n\nit seems that Anna and Barbara hate the action movies but love the comedy movies\n\n\nit seems that Charlie and Dave love the action movies but hate the comedy movies\n\n\nthe table is incomplete because every user has not rated at least one movie\n\n\n\n\nUsing this data you might want to:\n\n\n\n\npredict user rating of movie that is unrated by user i.e. to send user the movie which he would like but he does not rated that movie yet\n\n\nget movies similar to given movie\n\n\nget the prediction of the movie for user that has no rated any movie and use this data\n\n\n\n\nUsing Impulse-ML: Recommender you might end up with such predictions:\n\n\n+---------------------------------+------+---------+---------+---------+\n| Movie \\ User                    | Anna | Barbara | Charlie | Dave    |\n+---------------------------------+------+---------+---------+---------+\n| The Dark Knight                 | -    | -       | -       | -       |\n+---------------------------------+------+---------+---------+---------+\n| Guardians of the Galaxy         | -    | 0       | 5       | -       |\n+---------------------------------+------+---------+---------+---------+\n| Logan                           | 0    | -       | -       | 4       |\n+---------------------------------+------+---------+---------+---------+\n| Forrest Gump                    | -    | -       | -       | -       |\n+---------------------------------+------+---------+---------+---------+\n| The Kid                         | -    | -       | -       | -       |\n+---------------------------------+------+---------+---------+---------+\n\n\n\n\nWe might notice:\n\n\n\n\nAnna hates action movies so the prediction of \"Logan\" will be 0\n\n\nBarbara also hates action movies so the prediction of \"Guardians of the Galaxy\" will be 0\n\n\nCharlie loves the action movies so the prediction of \"Guardians of the Galaxy\" will be 5\n\n\nDave also loves the action movies so prediction of \"Logan\" will be 4 (not 5 since the maximum rating of this movie is equal 4)\n\n\n\n\nThat's how Collaborative Filtering works.\n\n\nTraining and training parameters\n\n\nAs each machine learning problem after filling with data in order to get correct prediction the training\n(based on the dataset) is required.\n\n\nThere is only one parameter for a Learning Model created from a dataset:\n\n\n\n\nnumber of features.\n\n\n\n\nUnderstand \nit like\ntype or real category of the item. It's value can be set equals number of item types in your \napplication. You don't need to name them, you have to know number of them.\n\n\nThere are two training parameters:\n\n\n\n\nlearning rate\n\n\nnumber of iterations\n\n\n\n\nThe \nlearning\n \nrate\n is parameter which describes how much gradient descent\n(which minimizes the error) will perform. You might to consider to increase or decrease \nthis parameter and it has strong\ncorrelation with number of iterations.\n\n\nThe \nnumber\n \nof\n \niterations\n is parameter which describes how much steps gradient descent minimize function\nwill be applied. It's highly correlated with learning rate.\n\n\nThe results of prediction may vary from desired by setting this parameters less accurate.\n\n\nHowever, there are some rules of setting these parameters more accurate in order to get\nbetter prediction:\n\n\n\n\nif you set small learning rate then you might consider increase number of iterations\n\n\nif you set large learning rate then you might consider decrease number of iterations\n\n\nyou might expect very low error - in this example a reasonable error would be less than 0.0001\n\n\nsetting too high learning rate may cause algorithm get computation error and the predictions become \n useless\n\n\n\n\nFor this particular example i have set:\n\n\n\n\nlearning rate === 0.01\n\n\nnumber of iterations === 20000\n\n\nnumber of features === 2 (since i noticed two types of movies or two user preferences)\n\n\n\n\nThe key to get well trained model is to choose the right ratio of learning rate and number of iterations.\n\n\nYou might consider try different number of features according to your Application so the dataset also.\n\n\nAbove example was fully implemented in \nexamples/1_train_and_predict.php\n.", 
            "title": "Problem motivation"
        }, 
        {
            "location": "/1_problem_motivation/#1-problem-motivation", 
            "text": "", 
            "title": "1. Problem motivation"
        }, 
        {
            "location": "/1_problem_motivation/#do-i-need-impulse-ml-recommender-the-recommender-system", 
            "text": "If you are a PHP developer who maintains any PHP social application and you\nwant to predict the \"rating\" or \"preference\" that a user would give to an item\nthe Impulse-ML: Recommender is library that you might consider to use!\nIn further readings I will show you how to use Impulse-ML: Recommender\nand give you a hint on how to choose parameters which makes the predictions\nmore accurate.", 
            "title": "Do I need Impulse-ML: Recommender, the Recommender System?"
        }, 
        {
            "location": "/1_problem_motivation/#problem-definition", 
            "text": "Consider the following data:  +---------------------------------+------+---------+---------+---------+\n| Movie \\ User                    | Anna | Barbara | Charlie | Dave    |\n+---------------------------------+------+---------+---------+---------+\n| The Dark Knight                 | 0    | 0       | 5       | 5       |\n+---------------------------------+------+---------+---------+---------+\n| Guardians of the Galaxy         | 0    | ?       | ?       | 5       |\n+---------------------------------+------+---------+---------+---------+\n| Logan                           | ?    | 0       | 4       | ?       |\n+---------------------------------+------+---------+---------+---------+\n| Forrest Gump                    | 4    | 5       | 0       | 0       |\n+---------------------------------+------+---------+---------+---------+\n| The Kid                         | 5    | 5       | 0       | 0       |\n+---------------------------------+------+---------+---------+---------+  In this particular example we can notice:   we have 5 items - 5 movies  we have 4 categories - 4 users  we can notice 2 types of items: action movie and comedy movie  it seems that Anna and Barbara hate the action movies but love the comedy movies  it seems that Charlie and Dave love the action movies but hate the comedy movies  the table is incomplete because every user has not rated at least one movie   Using this data you might want to:   predict user rating of movie that is unrated by user i.e. to send user the movie which he would like but he does not rated that movie yet  get movies similar to given movie  get the prediction of the movie for user that has no rated any movie and use this data   Using Impulse-ML: Recommender you might end up with such predictions:  +---------------------------------+------+---------+---------+---------+\n| Movie \\ User                    | Anna | Barbara | Charlie | Dave    |\n+---------------------------------+------+---------+---------+---------+\n| The Dark Knight                 | -    | -       | -       | -       |\n+---------------------------------+------+---------+---------+---------+\n| Guardians of the Galaxy         | -    | 0       | 5       | -       |\n+---------------------------------+------+---------+---------+---------+\n| Logan                           | 0    | -       | -       | 4       |\n+---------------------------------+------+---------+---------+---------+\n| Forrest Gump                    | -    | -       | -       | -       |\n+---------------------------------+------+---------+---------+---------+\n| The Kid                         | -    | -       | -       | -       |\n+---------------------------------+------+---------+---------+---------+  We might notice:   Anna hates action movies so the prediction of \"Logan\" will be 0  Barbara also hates action movies so the prediction of \"Guardians of the Galaxy\" will be 0  Charlie loves the action movies so the prediction of \"Guardians of the Galaxy\" will be 5  Dave also loves the action movies so prediction of \"Logan\" will be 4 (not 5 since the maximum rating of this movie is equal 4)   That's how Collaborative Filtering works.", 
            "title": "Problem definition"
        }, 
        {
            "location": "/1_problem_motivation/#training-and-training-parameters", 
            "text": "As each machine learning problem after filling with data in order to get correct prediction the training\n(based on the dataset) is required.  There is only one parameter for a Learning Model created from a dataset:   number of features.   Understand \nit like\ntype or real category of the item. It's value can be set equals number of item types in your \napplication. You don't need to name them, you have to know number of them.  There are two training parameters:   learning rate  number of iterations   The  learning   rate  is parameter which describes how much gradient descent\n(which minimizes the error) will perform. You might to consider to increase or decrease \nthis parameter and it has strong\ncorrelation with number of iterations.  The  number   of   iterations  is parameter which describes how much steps gradient descent minimize function\nwill be applied. It's highly correlated with learning rate.  The results of prediction may vary from desired by setting this parameters less accurate.  However, there are some rules of setting these parameters more accurate in order to get\nbetter prediction:   if you set small learning rate then you might consider increase number of iterations  if you set large learning rate then you might consider decrease number of iterations  you might expect very low error - in this example a reasonable error would be less than 0.0001  setting too high learning rate may cause algorithm get computation error and the predictions become \n useless   For this particular example i have set:   learning rate === 0.01  number of iterations === 20000  number of features === 2 (since i noticed two types of movies or two user preferences)   The key to get well trained model is to choose the right ratio of learning rate and number of iterations.  You might consider try different number of features according to your Application so the dataset also.  Above example was fully implemented in  examples/1_train_and_predict.php .", 
            "title": "Training and training parameters"
        }, 
        {
            "location": "/2_api_dataset/", 
            "text": "2. API - Dataset\n\n\nPassing data to Impulse-ML: Recommender Dataset\n\n\nEach algorithm, not only machine learning algorithm Impulse-ML: Recommender, must have knowledge about\nyour data. Since the PHP applications use different storage systems Impulse-ML: Recommender has no database\ndata fetcher - you might consider pass data directly to Dataset class instance.\n\n\nConsider the following code:\n\n\ninclude_once __DIR__ . '/../src/Impulse/Recommender/Dataset.php';\n\n$dataset = new Impulse\\Recommender\\Dataset();\n\n$dataset-\naddItem(Impulse\\Recommender\\Dataset\\Item::create('The Dark Knight'));\n$dataset-\naddCategory(Impulse\\Recommender\\Dataset\\Category::create('Anna'));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('The Dark Knight', 'Anna', 0));\n\n\n\n\nIt is minimum example to set 1 item (The Dark Knight), 1 category (Anna) and set it's rating to value of 0 \nby user Anna.\n\n\nThe example does not have any sense because we might want to have multiple items, categories as ratings - but\nyou should have knowledge how to pass data to recommender system.\n\n\nIn this example I used strings as my items, but \nImpulse\\Recommender\\Dataset\\Item::create\n \nand \nImpulse\\Recommender\\Dataset\\Category::create\n methods can also get an integer instead\nof string. You might consider pass integers to dataset as long as their values correspond to database\nprimary keys and you will save a lot of memory than using a strings.\n\n\nAlso, each of those 2 \ncreate\n methods can get second parameter which has no defined and no\nrequired data type. You might\nconsider pass to it an array with your database model data for future use if database primary keys is not \nso much useful.\n\n\nThe \nImpulse\\Recommender\\Dataset\\Rating::create\n requires 3 parameters, which the first 2 - the item and\nthe category should be already added to dataset and the third one should be numeric value. \nThere is no minimum or \nmaximum value, but different ranges of all ratings can require a different learning parameters. You might\nconsider pass NULL if item is not rated but it is not required.\n\n\nFor real life example of creating dataset check \nexamples/1_train_and_predict.php", 
            "title": "API: Dataset"
        }, 
        {
            "location": "/2_api_dataset/#2-api-dataset", 
            "text": "", 
            "title": "2. API - Dataset"
        }, 
        {
            "location": "/2_api_dataset/#passing-data-to-impulse-ml-recommender-dataset", 
            "text": "Each algorithm, not only machine learning algorithm Impulse-ML: Recommender, must have knowledge about\nyour data. Since the PHP applications use different storage systems Impulse-ML: Recommender has no database\ndata fetcher - you might consider pass data directly to Dataset class instance.  Consider the following code:  include_once __DIR__ . '/../src/Impulse/Recommender/Dataset.php';\n\n$dataset = new Impulse\\Recommender\\Dataset();\n\n$dataset- addItem(Impulse\\Recommender\\Dataset\\Item::create('The Dark Knight'));\n$dataset- addCategory(Impulse\\Recommender\\Dataset\\Category::create('Anna'));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('The Dark Knight', 'Anna', 0));  It is minimum example to set 1 item (The Dark Knight), 1 category (Anna) and set it's rating to value of 0 \nby user Anna.  The example does not have any sense because we might want to have multiple items, categories as ratings - but\nyou should have knowledge how to pass data to recommender system.  In this example I used strings as my items, but  Impulse\\Recommender\\Dataset\\Item::create  \nand  Impulse\\Recommender\\Dataset\\Category::create  methods can also get an integer instead\nof string. You might consider pass integers to dataset as long as their values correspond to database\nprimary keys and you will save a lot of memory than using a strings.  Also, each of those 2  create  methods can get second parameter which has no defined and no\nrequired data type. You might\nconsider pass to it an array with your database model data for future use if database primary keys is not \nso much useful.  The  Impulse\\Recommender\\Dataset\\Rating::create  requires 3 parameters, which the first 2 - the item and\nthe category should be already added to dataset and the third one should be numeric value. \nThere is no minimum or \nmaximum value, but different ranges of all ratings can require a different learning parameters. You might\nconsider pass NULL if item is not rated but it is not required.  For real life example of creating dataset check  examples/1_train_and_predict.php", 
            "title": "Passing data to Impulse-ML: Recommender Dataset"
        }, 
        {
            "location": "/3_api_learning_model/", 
            "text": "3. API - Learning Model\n\n\nLearning from dataset\n\n\nAssuming that we have data stored in \nImpulse\\Recommender\\Dataset\n we are ready to create\na Learning Model.\n\n\nWe can do this by using:\n\n\n$model = new Impulse\\Recommender\\LearningModel($dataset, [\n    'numFeatures' =\n 2\n]);\n\n\n\n\n\"numFeatures\" is required parameter. It may strictly correspond to number of categories of database\nitems or number of defined user preferences. \nNotice that you don't need to define how much every item belongs to\ngiven category or how much user belongs to given preference. You just need to know number of them.", 
            "title": "API: Learning Model"
        }, 
        {
            "location": "/3_api_learning_model/#3-api-learning-model", 
            "text": "", 
            "title": "3. API - Learning Model"
        }, 
        {
            "location": "/3_api_learning_model/#learning-from-dataset", 
            "text": "Assuming that we have data stored in  Impulse\\Recommender\\Dataset  we are ready to create\na Learning Model.  We can do this by using:  $model = new Impulse\\Recommender\\LearningModel($dataset, [\n    'numFeatures' =  2\n]);  \"numFeatures\" is required parameter. It may strictly correspond to number of categories of database\nitems or number of defined user preferences. \nNotice that you don't need to define how much every item belongs to\ngiven category or how much user belongs to given preference. You just need to know number of them.", 
            "title": "Learning from dataset"
        }, 
        {
            "location": "/4_api_training_the_model/", 
            "text": "4. API - Training the model\n\n\nTraining the model\n\n\nYou can get this done by using:\n\n\n$trainer = new Impulse\\Recommender\\Trainer($model, [\n    'learningRate' =\n 0.01,\n    'iterations' =\n 20000,\n    'verbose' =\n TRUE, // print debug messages\n    'verboseStep' =\n 1000 // step interval from displaying debug messages\n]);\n\n$trainer-\ntrain();\n\n\n\n\nNote that training time may take very long time when your dataset is really large. It can be optimized\nmore or less by\nchoosing more accurate \"learningRate\" and \"iterations\" parameters.", 
            "title": "API: Training the model"
        }, 
        {
            "location": "/4_api_training_the_model/#4-api-training-the-model", 
            "text": "", 
            "title": "4. API - Training the model"
        }, 
        {
            "location": "/4_api_training_the_model/#training-the-model", 
            "text": "You can get this done by using:  $trainer = new Impulse\\Recommender\\Trainer($model, [\n    'learningRate' =  0.01,\n    'iterations' =  20000,\n    'verbose' =  TRUE, // print debug messages\n    'verboseStep' =  1000 // step interval from displaying debug messages\n]);\n\n$trainer- train();  Note that training time may take very long time when your dataset is really large. It can be optimized\nmore or less by\nchoosing more accurate \"learningRate\" and \"iterations\" parameters.", 
            "title": "Training the model"
        }, 
        {
            "location": "/5_api_predicting_the_results/", 
            "text": "5. API - Predicting the results\n\n\nThere are 3 prediction ways:\n\n\nPredict rating for user\n\n\n$model-\npredict('Logan', 'Anna'); // float(9.9920072216264E-14)\n\n\n\n\nwhich predicts rate for unrated \"Logan\" for user \"Anna\" by returning a number.\n\n\nResults may vary from desired because of improperly trained or not trained Learning Model.\n\n\nFind similar items\n\n\n$model-\nfindRelated('The Dark Knight', [\n    'limit' =\n 1\n])\n\n\n\n\nwill finds all items in ordered by similarity array and it will returns:\n\n\narray(1) {\n  [0]=\n\n  array(2) {\n    [\nsimilarity\n]=\n\n    float(2.2657653531155E-11)\n    [\nmodel\n]=\n\n    array(2) {\n      [\n_id\n]=\n\n      string(23) \nGuardians of the Galaxy\n\n      [\ndata\n]=\n\n      NULL\n    }\n  }\n}\n\n\n\n\nPredict rate for user which has not rated any movie\n\n\n$model-\npredict(\nForrest Gump\n); // int(2)\n\n\n\n\nwhich can be useful when the user has not rated any movie so user has no computed preferences.", 
            "title": "API: Predicting the results"
        }, 
        {
            "location": "/5_api_predicting_the_results/#5-api-predicting-the-results", 
            "text": "There are 3 prediction ways:", 
            "title": "5. API - Predicting the results"
        }, 
        {
            "location": "/5_api_predicting_the_results/#predict-rating-for-user", 
            "text": "$model- predict('Logan', 'Anna'); // float(9.9920072216264E-14)  which predicts rate for unrated \"Logan\" for user \"Anna\" by returning a number.  Results may vary from desired because of improperly trained or not trained Learning Model.", 
            "title": "Predict rating for user"
        }, 
        {
            "location": "/5_api_predicting_the_results/#find-similar-items", 
            "text": "$model- findRelated('The Dark Knight', [\n    'limit' =  1\n])  will finds all items in ordered by similarity array and it will returns:  array(1) {\n  [0]= \n  array(2) {\n    [ similarity ]= \n    float(2.2657653531155E-11)\n    [ model ]= \n    array(2) {\n      [ _id ]= \n      string(23)  Guardians of the Galaxy \n      [ data ]= \n      NULL\n    }\n  }\n}", 
            "title": "Find similar items"
        }, 
        {
            "location": "/5_api_predicting_the_results/#predict-rate-for-user-which-has-not-rated-any-movie", 
            "text": "$model- predict( Forrest Gump ); // int(2)  which can be useful when the user has not rated any movie so user has no computed preferences.", 
            "title": "Predict rate for user which has not rated any movie"
        }, 
        {
            "location": "/6_api_full_example/", 
            "text": "6. API - Full example\n\n\ninclude_once __DIR__ . '/../src/Impulse/Recommender/Dataset.php';\ninclude_once __DIR__ . '/../src/Impulse/Recommender/LearningModel.php';\ninclude_once __DIR__ . '/../src/Impulse/Recommender/Trainer.php';\n\n$dataset = new Impulse\\Recommender\\Dataset();\n\n$dataset-\naddItem(Impulse\\Recommender\\Dataset\\Item::create('The Dark Knight'));\n$dataset-\naddItem(Impulse\\Recommender\\Dataset\\Item::create('Guardians of the Galaxy'));\n$dataset-\naddItem(Impulse\\Recommender\\Dataset\\Item::create('Logan'));\n$dataset-\naddItem(Impulse\\Recommender\\Dataset\\Item::create('Forrest Gump'));\n$dataset-\naddItem(Impulse\\Recommender\\Dataset\\Item::create('The Kid'));\n\n$dataset-\naddCategory(Impulse\\Recommender\\Dataset\\Category::create('Anna'));\n$dataset-\naddCategory(Impulse\\Recommender\\Dataset\\Category::create('Barbara'));\n$dataset-\naddCategory(Impulse\\Recommender\\Dataset\\Category::create('Charlie'));\n$dataset-\naddCategory(Impulse\\Recommender\\Dataset\\Category::create('Dave'));\n\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('The Dark Knight', 'Anna', 0));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('The Dark Knight', 'Barbara', 0));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('The Dark Knight', 'Charlie', 5));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('The Dark Knight', 'Dave', 5));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('Guardians of the Galaxy', 'Anna', 0));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('Guardians of the Galaxy', 'Barbara', NULL));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('Guardians of the Galaxy', 'Charlie', NULL));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('Guardians of the Galaxy', 'Dave', 5));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('Logan', 'Anna', NULL));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('Logan', 'Barbara', 0));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('Logan', 'Charlie', 4));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('Logan', 'Dave', NULL));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('Forrest Gump', 'Anna', 4));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('Forrest Gump', 'Barbara', 5));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('Forrest Gump', 'Charlie', 0));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('Forrest Gump', 'Dave', 0));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('The Kid', 'Anna', 5));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('The Kid', 'Barbara', 5));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('The Kid', 'Charlie', 0));\n$dataset-\naddRating(Impulse\\Recommender\\Dataset\\Rating::create('The Kid', 'Dave', 0));\n\n$model = new Impulse\\Recommender\\LearningModel($dataset, [\n    'numFeatures' =\n 2\n]);\n\n$trainer = new Impulse\\Recommender\\Trainer($model, [\n    'learningRate' =\n 0.01,\n    'iterations' =\n 20000,\n    'verbose' =\n TRUE,\n    'verboseStep' =\n 1000\n]);\n\n$trainer-\ntrain();\n\necho \nPrediction for 'Guardians of the Galaxy' for user 'Barbara': {$model-\npredict('Guardians of the Galaxy', 'Barbara')}\\n\n;\necho \nPrediction for 'Guardians of the Galaxy' for user 'Charlie': {$model-\npredict('Guardians of the Galaxy', 'Charlie')}\\n\n;\necho \nPrediction for 'Logan' for user 'Anna': {$model-\npredict('Logan', 'Anna')}\\n\n;\necho \nPrediction for 'Logan' for user 'Dave': {$model-\npredict('Logan', 'Dave')}\\n\n;\n\necho \nPrediction for 'Logan' for user with has not rated any movie: {$model-\npredict('Logan')}\\n\n;\n\necho \nRelated movies dump:\\n\n;\n\nvar_dump($model-\nfindRelated('The Dark Knight', [\n    'limit' =\n 5\n]));\n\n\n\n\nWhich may produce output:\n\n\nStarting train with 20000 steps.\nStep 0 with error 45.480538085596\nStep 1000 with error 0.14185749105855\nStep 2000 with error 0.00012367547481656\nStep 3000 with error 3.619659641736E-6\nStep 4000 with error 1.2231304078042E-7\nStep 5000 with error 5.7888427762046E-9\nStep 6000 with error 4.3159398580704E-10\nStep 7000 with error 4.2963851024733E-11\nStep 8000 with error 4.7458579962238E-12\nStep 9000 with error 5.3950928017295E-13\nStep 10000 with error 6.1779842297497E-14\nStep 11000 with error 7.0872758334659E-15\nStep 12000 with error 8.1340228680908E-16\nStep 13000 with error 9.3363924793255E-17\nStep 14000 with error 1.0716785358187E-17\nStep 15000 with error 1.2301363738974E-18\nStep 16000 with error 1.4120237226256E-19\nStep 17000 with error 1.6208264249521E-20\nStep 18000 with error 1.8605120483173E-21\nStep 19000 with error 2.1359434707995E-22\nTraining ended with error 2.4586853842564E-23 after 20000 steps.\nPrediction for 'Guardians of the Galaxy' for user 'Barbara': 1.3472778448431E-11\nPrediction for 'Guardians of the Galaxy' for user 'Charlie': 4.9999999999974\nPrediction for 'Logan' for user 'Anna': 1.3994139180795E-11\nPrediction for 'Logan' for user 'Dave': 3.9999999999967\nPrediction for 'Logan' for user with has not rated any movie: 2\nRelated movies dump:\narray(4) {\n  [0]=\n\n  array(2) {\n    [\nsimilarity\n]=\n\n    float(1.1086798146209E-11)\n    [\nmodel\n]=\n\n    array(2) {\n      [\n_id\n]=\n\n      string(23) \nGuardians of the Galaxy\n\n      [\ndata\n]=\n\n      NULL\n    }\n  }\n  [1]=\n\n  array(2) {\n    [\nsimilarity\n]=\n\n    float(0.17881301819823)\n    [\nmodel\n]=\n\n    array(2) {\n      [\n_id\n]=\n\n      string(5) \nLogan\n\n      [\ndata\n]=\n\n      NULL\n    }\n  }\n  [2]=\n\n  array(2) {\n    [\nsimilarity\n]=\n\n    float(0.92344428953759)\n    [\nmodel\n]=\n\n    array(2) {\n      [\n_id\n]=\n\n      string(12) \nForrest Gump\n\n      [\ndata\n]=\n\n      NULL\n    }\n  }\n  [3]=\n\n  array(2) {\n    [\nsimilarity\n]=\n\n    float(1.7881301818354)\n    [\nmodel\n]=\n\n    array(2) {\n      [\n_id\n]=\n\n      string(7) \nThe Kid\n\n      [\ndata\n]=\n\n      NULL\n    }\n  }\n}\n\n\n\n\nCheck \nexamples/1_train_and_predict.php\n for details.", 
            "title": "API: Full example"
        }, 
        {
            "location": "/6_api_full_example/#6-api-full-example", 
            "text": "include_once __DIR__ . '/../src/Impulse/Recommender/Dataset.php';\ninclude_once __DIR__ . '/../src/Impulse/Recommender/LearningModel.php';\ninclude_once __DIR__ . '/../src/Impulse/Recommender/Trainer.php';\n\n$dataset = new Impulse\\Recommender\\Dataset();\n\n$dataset- addItem(Impulse\\Recommender\\Dataset\\Item::create('The Dark Knight'));\n$dataset- addItem(Impulse\\Recommender\\Dataset\\Item::create('Guardians of the Galaxy'));\n$dataset- addItem(Impulse\\Recommender\\Dataset\\Item::create('Logan'));\n$dataset- addItem(Impulse\\Recommender\\Dataset\\Item::create('Forrest Gump'));\n$dataset- addItem(Impulse\\Recommender\\Dataset\\Item::create('The Kid'));\n\n$dataset- addCategory(Impulse\\Recommender\\Dataset\\Category::create('Anna'));\n$dataset- addCategory(Impulse\\Recommender\\Dataset\\Category::create('Barbara'));\n$dataset- addCategory(Impulse\\Recommender\\Dataset\\Category::create('Charlie'));\n$dataset- addCategory(Impulse\\Recommender\\Dataset\\Category::create('Dave'));\n\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('The Dark Knight', 'Anna', 0));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('The Dark Knight', 'Barbara', 0));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('The Dark Knight', 'Charlie', 5));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('The Dark Knight', 'Dave', 5));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('Guardians of the Galaxy', 'Anna', 0));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('Guardians of the Galaxy', 'Barbara', NULL));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('Guardians of the Galaxy', 'Charlie', NULL));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('Guardians of the Galaxy', 'Dave', 5));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('Logan', 'Anna', NULL));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('Logan', 'Barbara', 0));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('Logan', 'Charlie', 4));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('Logan', 'Dave', NULL));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('Forrest Gump', 'Anna', 4));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('Forrest Gump', 'Barbara', 5));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('Forrest Gump', 'Charlie', 0));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('Forrest Gump', 'Dave', 0));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('The Kid', 'Anna', 5));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('The Kid', 'Barbara', 5));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('The Kid', 'Charlie', 0));\n$dataset- addRating(Impulse\\Recommender\\Dataset\\Rating::create('The Kid', 'Dave', 0));\n\n$model = new Impulse\\Recommender\\LearningModel($dataset, [\n    'numFeatures' =  2\n]);\n\n$trainer = new Impulse\\Recommender\\Trainer($model, [\n    'learningRate' =  0.01,\n    'iterations' =  20000,\n    'verbose' =  TRUE,\n    'verboseStep' =  1000\n]);\n\n$trainer- train();\n\necho  Prediction for 'Guardians of the Galaxy' for user 'Barbara': {$model- predict('Guardians of the Galaxy', 'Barbara')}\\n ;\necho  Prediction for 'Guardians of the Galaxy' for user 'Charlie': {$model- predict('Guardians of the Galaxy', 'Charlie')}\\n ;\necho  Prediction for 'Logan' for user 'Anna': {$model- predict('Logan', 'Anna')}\\n ;\necho  Prediction for 'Logan' for user 'Dave': {$model- predict('Logan', 'Dave')}\\n ;\n\necho  Prediction for 'Logan' for user with has not rated any movie: {$model- predict('Logan')}\\n ;\n\necho  Related movies dump:\\n ;\n\nvar_dump($model- findRelated('The Dark Knight', [\n    'limit' =  5\n]));  Which may produce output:  Starting train with 20000 steps.\nStep 0 with error 45.480538085596\nStep 1000 with error 0.14185749105855\nStep 2000 with error 0.00012367547481656\nStep 3000 with error 3.619659641736E-6\nStep 4000 with error 1.2231304078042E-7\nStep 5000 with error 5.7888427762046E-9\nStep 6000 with error 4.3159398580704E-10\nStep 7000 with error 4.2963851024733E-11\nStep 8000 with error 4.7458579962238E-12\nStep 9000 with error 5.3950928017295E-13\nStep 10000 with error 6.1779842297497E-14\nStep 11000 with error 7.0872758334659E-15\nStep 12000 with error 8.1340228680908E-16\nStep 13000 with error 9.3363924793255E-17\nStep 14000 with error 1.0716785358187E-17\nStep 15000 with error 1.2301363738974E-18\nStep 16000 with error 1.4120237226256E-19\nStep 17000 with error 1.6208264249521E-20\nStep 18000 with error 1.8605120483173E-21\nStep 19000 with error 2.1359434707995E-22\nTraining ended with error 2.4586853842564E-23 after 20000 steps.\nPrediction for 'Guardians of the Galaxy' for user 'Barbara': 1.3472778448431E-11\nPrediction for 'Guardians of the Galaxy' for user 'Charlie': 4.9999999999974\nPrediction for 'Logan' for user 'Anna': 1.3994139180795E-11\nPrediction for 'Logan' for user 'Dave': 3.9999999999967\nPrediction for 'Logan' for user with has not rated any movie: 2\nRelated movies dump:\narray(4) {\n  [0]= \n  array(2) {\n    [ similarity ]= \n    float(1.1086798146209E-11)\n    [ model ]= \n    array(2) {\n      [ _id ]= \n      string(23)  Guardians of the Galaxy \n      [ data ]= \n      NULL\n    }\n  }\n  [1]= \n  array(2) {\n    [ similarity ]= \n    float(0.17881301819823)\n    [ model ]= \n    array(2) {\n      [ _id ]= \n      string(5)  Logan \n      [ data ]= \n      NULL\n    }\n  }\n  [2]= \n  array(2) {\n    [ similarity ]= \n    float(0.92344428953759)\n    [ model ]= \n    array(2) {\n      [ _id ]= \n      string(12)  Forrest Gump \n      [ data ]= \n      NULL\n    }\n  }\n  [3]= \n  array(2) {\n    [ similarity ]= \n    float(1.7881301818354)\n    [ model ]= \n    array(2) {\n      [ _id ]= \n      string(7)  The Kid \n      [ data ]= \n      NULL\n    }\n  }\n}  Check  examples/1_train_and_predict.php  for details.", 
            "title": "6. API - Full example"
        }, 
        {
            "location": "/7_examples_of_training/", 
            "text": "7. Examples of training\n\n\nAccording to our data table from lecture 2_problem_motivation.md consider the following learning parameters\nfor this dataset:\n\n\n\n\n1: learningRate = 0.0001, iterations = 1000\n\n\n2: learningRate = 0.1, iterations = 10000\n\n\n3: learningRate = 0.0001, iterations = 100000\n\n\n4: learningRate = 0.01, iterations = 100000\n\n\n\n\nYou might end up with following debug messages:\n\n\nEx. 1\n\n\nlearningRate = 0.0001, iterations = 1000\n\n\n\n\nThe learningRate is too low and the iterations are too low - we have untrained model with high error.\n\n\nEx. 2\n\n\nlearningRate = 0.1, iterations = 10000\n\n\n\n\nThe learningRate is too high cause after some step we have got numerical computation error.\n\n\nEx. 3\n\n\nlearningRate = 0.0001, iterations = 100000\n\n\n\n\nIt is quite good error, but you might consider setting number of iterations to higher value or\nincreasing learning rate.\n\n\nEx. 4\n\n\nlearningRate = 0.01, iterations = 100000\n\n\n\n\nAfter some steps we are not minimizing the error which is very close to 0\nso you might consider decrease number of iterations.\n\n\nNote\n\n\nThe following examples with too large number of iterations should not have big impact on the time of\ntraining the model according to our small dataset used in previous examples.\nYou might consider adjust more accurate parameters in larger datasets.", 
            "title": "Examples of training"
        }, 
        {
            "location": "/7_examples_of_training/#7-examples-of-training", 
            "text": "According to our data table from lecture 2_problem_motivation.md consider the following learning parameters\nfor this dataset:   1: learningRate = 0.0001, iterations = 1000  2: learningRate = 0.1, iterations = 10000  3: learningRate = 0.0001, iterations = 100000  4: learningRate = 0.01, iterations = 100000   You might end up with following debug messages:", 
            "title": "7. Examples of training"
        }, 
        {
            "location": "/7_examples_of_training/#ex-1", 
            "text": "learningRate = 0.0001, iterations = 1000   The learningRate is too low and the iterations are too low - we have untrained model with high error.", 
            "title": "Ex. 1"
        }, 
        {
            "location": "/7_examples_of_training/#ex-2", 
            "text": "learningRate = 0.1, iterations = 10000   The learningRate is too high cause after some step we have got numerical computation error.", 
            "title": "Ex. 2"
        }, 
        {
            "location": "/7_examples_of_training/#ex-3", 
            "text": "learningRate = 0.0001, iterations = 100000   It is quite good error, but you might consider setting number of iterations to higher value or\nincreasing learning rate.", 
            "title": "Ex. 3"
        }, 
        {
            "location": "/7_examples_of_training/#ex-4", 
            "text": "learningRate = 0.01, iterations = 100000   After some steps we are not minimizing the error which is very close to 0\nso you might consider decrease number of iterations.", 
            "title": "Ex. 4"
        }, 
        {
            "location": "/7_examples_of_training/#note", 
            "text": "The following examples with too large number of iterations should not have big impact on the time of\ntraining the model according to our small dataset used in previous examples.\nYou might consider adjust more accurate parameters in larger datasets.", 
            "title": "Note"
        }, 
        {
            "location": "/8_api_saving_and_restoring_trained_model/", 
            "text": "8. API - Saving and restoring trained model\n\n\nYou probably don't want to train your model after each one rate given by user, but for sure you might want\nto do that job outside your website because the training time could take very large amount of time.\n\n\nFor do this we have implemented saving and restoring your trained Learning Model.\n\n\nSave\n\n\ninclude_once __DIR__ . '/../src/Impulse/Recommender/Builder.php';\n\n$builder = new Impulse\\Recommender\\Builder($model);\n$builder-\nsave(__DIR__, 'save1');\n\n\n\n\nRestore\n\n\ninclude_once __DIR__ . '/../src/Impulse/Recommender/Builder.php';\n\n$model = Impulse\\Recommender\\Builder::load(__DIR__, 'save1');\n\n\n\n\nEach of those methods takes 2 parameters which the first one is location of the directory to save the data,\nand the second one is name of created directory for the data files.\n\n\nCheck \nexamples/2_save.php\n and \n\nexamples/3_load_and_predict.php\n for example of implementation.", 
            "title": "API: Saving and restoring"
        }, 
        {
            "location": "/8_api_saving_and_restoring_trained_model/#8-api-saving-and-restoring-trained-model", 
            "text": "You probably don't want to train your model after each one rate given by user, but for sure you might want\nto do that job outside your website because the training time could take very large amount of time.  For do this we have implemented saving and restoring your trained Learning Model.", 
            "title": "8. API - Saving and restoring trained model"
        }, 
        {
            "location": "/8_api_saving_and_restoring_trained_model/#save", 
            "text": "include_once __DIR__ . '/../src/Impulse/Recommender/Builder.php';\n\n$builder = new Impulse\\Recommender\\Builder($model);\n$builder- save(__DIR__, 'save1');", 
            "title": "Save"
        }, 
        {
            "location": "/8_api_saving_and_restoring_trained_model/#restore", 
            "text": "include_once __DIR__ . '/../src/Impulse/Recommender/Builder.php';\n\n$model = Impulse\\Recommender\\Builder::load(__DIR__, 'save1');  Each of those methods takes 2 parameters which the first one is location of the directory to save the data,\nand the second one is name of created directory for the data files.  Check  examples/2_save.php  and  examples/3_load_and_predict.php  for example of implementation.", 
            "title": "Restore"
        }
    ]
}